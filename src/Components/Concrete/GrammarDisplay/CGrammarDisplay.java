/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Components.Concrete.GrammarDisplay;

import Analyzers.CGrammarAnalyzer;
import Components.Concrete.Grammar.IGrammarComp;
import GrammarNotions.Grammar.CGrammar;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/**
 * This is a view for the grammar with facilities for viewing grammar definitions and grammar analysis information.
 * Grammar definitions can be viewed in two different ways:
 * <ul>
 * <li> As key/value pairs in tabular form.
 * <li> As an abstract syntax tree in tree-like form.
 * </ul>
 * When linked to <code>GrammarComp</code>, it observes changes in the grammar and updates
 * its view facilities.
 * 
 * @author Jackline Ssanyu (jssanyu@kyu.ac.ug)
 */
public class CGrammarDisplay extends javax.swing.JPanel implements PropertyChangeListener {
     /**
     * A reference to grammar object.
     */
    private IGrammarComp Grammar=null;
     /**
       * A two dimensional data structure used to store lexeme definitions 
       * for displaying in a table.
       * 
       */
    private CLexemesTableModel LexemesTableModel;
     
    /**
      * A two dimensional data structure used to store terminal definitions 
      * for displaying in a table.
      * 
      */
    private CTerminalsTableModel TerminalsTableModel;
    /**
      * A two dimensional data structure used to store nonterminal definitions 
      * for displaying in a table.
      * 
      */
    private CNonterminalsTableModel NonterminalsTableModel;
    /**
     * A reference to a grammar analyzer object.
     */
    private CGrammarAnalyzer vAnalyzer=new CGrammarAnalyzer();
    
    
    
    
     /**
     * Creates a new instance of <code>CGrammarView</code>.
     */
    public CGrammarDisplay() {
       
        TerminalsTableModel=new CTerminalsTableModel();
        NonterminalsTableModel=new CNonterminalsTableModel();
        LexemesTableModel=new CLexemesTableModel();
        initComponents();
        tblLexemes.setShowGrid(true);
        tblTerminals.setShowGrid(true);
        tblNonTerminals.setShowGrid(true);
    }
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTerminals = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblNonTerminals = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblLexemes = new javax.swing.JTable();

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane2.setDividerLocation(90);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jLabel3.setText("Terminals:");

        tblTerminals.setModel(TerminalsTableModel);
        tblTerminals.setGridColor(new java.awt.Color(153, 153, 153));
        jScrollPane2.setViewportView(tblTerminals);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
        );

        jSplitPane2.setTopComponent(jPanel2);

        jLabel4.setText("NonTerminals:");

        tblNonTerminals.setModel(NonterminalsTableModel);
        tblNonTerminals.setGridColor(new java.awt.Color(153, 153, 153));
        jScrollPane3.setViewportView(tblNonTerminals);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
        );

        jSplitPane2.setRightComponent(jPanel4);

        jSplitPane1.setBottomComponent(jSplitPane2);

        jLabel2.setText("Lexemes");

        tblLexemes.setModel(LexemesTableModel);
        tblLexemes.setGridColor(new java.awt.Color(153, 153, 153));
        jScrollPane4.setViewportView(tblLexemes);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 311, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 86, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>//GEN-END:initComponents
 
      
                                        
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTable tblLexemes;
    private javax.swing.JTable tblNonTerminals;
    private javax.swing.JTable tblTerminals;
    // End of variables declaration//GEN-END:variables
/**
     * Get the value of Grammar
     *
     * @return the value of Grammar
     */
 public IGrammarComp getGrammar(){
        return Grammar;
 }
 /**
  * Links to <code>GrammarComp</code> component via its interface -- Set the value of <code>Grammar</code>.
  * Register for property change events and retrieve current value of this Grammar object and update the view.
  * 
  * @param aGrammar new value of Grammar
  */
   public void setGrammar(IGrammarComp aGrammar){
       CGrammar vGrammarStructure;
       if(Grammar!=null){
              Grammar.removePropertyChangeListener(this);
       }
       Grammar=aGrammar;
       if(Grammar!=null){
              Grammar.addPropertyChangeListener(this);
              vGrammarStructure=Grammar.getGrammarStructure();

       } else {
            vGrammarStructure=new CGrammar();
       }
       updateGrammarView(vGrammarStructure);
    }
    /**
     * Updates the <code>GrammarView</code> with the new value of grammar's internal structure. 
     * @param aGrammarStructure the value of grammar's internal structure.
     */
    public void updateGrammarView(CGrammar aGrammarStructure){
         updateTables(aGrammarStructure);
        // txtStartExpr.setText(aGrammarStructure.getStartExpr().toString());
    }
    /**
     * Updates the lexeme, terminals and nonterminals table models with the new value of grammar's internal structure. 
     * @param aGrammarStructure the value of grammar's internal structure.
     */
    public void updateTables(CGrammar aGrammarStructure){
         LexemesTableModel.updateLexemesTable( aGrammarStructure);
         TerminalsTableModel.updateTerminalsTable( aGrammarStructure);
         NonterminalsTableModel.updateNonterminalsTable( aGrammarStructure);
    }
     /**
     * Receives property change events and handles them. If the property change is from the <code>GrammarComp</code> component.
     * Retrieve the internal structure of this grammar and update this grammar view. 
     * 
     * @param evt event object with the new value
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt){
        Object source=evt.getSource();
        if(source==Grammar)
            updateGrammarView(Grammar.getGrammarStructure());
    }

    
    
    /**
     * Removes all elements from the grammarview component
     */
    public void clear(){
        
   }
}
