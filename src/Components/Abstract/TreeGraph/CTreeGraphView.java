/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Components.Abstract.TreeGraph;

import Components.INodeObject;
import GrammarNotions.ECFGNodes.CECFGNode;
import GrammarNotions.RegExpr.CRE;
import Nodes.CNode;
import TreeLayout.*;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 * A component used to view regular expression trees, Nondeterministic Finite Automata (NFA) graphs, parse trees and ASTs.
 * It collaborates with all PAMOJA components (such as Parser, TreeEditor, Abstractor, BasicHybridEditor and CoreHybridEditor) which produce any of the elements mentioned.
 * 
 * @author Jackline Ssanyu (jssanyu@kyu.ac.ug)
 */
public class CTreeGraphView extends javax.swing.JPanel implements PropertyChangeListener  {
    
     /**
     * A reference to <code>NodeObject</code> object.
     */
       public INodeObject NodeObject;
       
    /**
     *
     */
    public CTreeNode treeNode;
       
       private CParseTreeGraphBuilder parseTreeGraph;
       private CRETreeGraph reTreeGraph;
       private CASTGraphBuilder astTreeGraph;

    /**
     * Creates new TreeGraghView object.
     */
    public CTreeGraphView() { 
        super();
        treeNode=initialNode();
        parseTreeGraph=new CParseTreeGraphBuilder(treeNode);
        reTreeGraph=new CRETreeGraph(treeNode);
        astTreeGraph=new CASTGraphBuilder(treeNode);
        initComponents();
        initAddedComponents();
    }

    private CTreeNode initialNode(){
       CTreeNode node1=new CTreeNode(CNodeStyle.RECTANGLE,CEdgeStyle.FAN,new Color(204,153,255),"Node1",new ArrayList<CTreeNode>());
       CTreeNode node2=new CTreeNode(CNodeStyle.RECTANGLE,CEdgeStyle.FAN,new Color(204,153,255),"Node2",new ArrayList<CTreeNode>());
       ArrayList<CTreeNode> a=new ArrayList<>();
       a.add(node1);
       a.add(node2);
       return new CTreeNode(CNodeStyle.RECTANGLE,CEdgeStyle.FAN,new Color(204,153,255),"Root",a);
    }
    
    /**
     * Resets the TreeGraphView to a default tree.
     */
    public void reSetTreeGraph(){
        setNode(initialNode());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SubtreeAlignmentbuttonGroup = new javax.swing.ButtonGroup();
        settingsPanel = new javax.swing.JPanel();
        HSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        VSlider = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        topAlignRadioButton = new javax.swing.JRadioButton();
        bottomAlignRadioButton = new javax.swing.JRadioButton();
        drawBoundBoxCheckBox = new javax.swing.JCheckBox();
        displayPanel = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        settingsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        HSlider.setPaintTicks(true);
        HSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                HSliderStateChanged(evt);
            }
        });

        jLabel1.setText("Vertical Space");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        VSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        VSlider.setPaintTicks(true);
        VSlider.setInverted(true);
        VSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                VSliderStateChanged(evt);
            }
        });

        jLabel2.setText("Horizontal Space");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Subtree Alignment"));

        SubtreeAlignmentbuttonGroup.add(topAlignRadioButton);
        topAlignRadioButton.setSelected(true);
        topAlignRadioButton.setText("Top Aligned");
        topAlignRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topAlignRadioButtonActionPerformed(evt);
            }
        });

        SubtreeAlignmentbuttonGroup.add(bottomAlignRadioButton);
        bottomAlignRadioButton.setText("Bottom Aligned");
        bottomAlignRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottomAlignRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bottomAlignRadioButton)
                    .addComponent(topAlignRadioButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(topAlignRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bottomAlignRadioButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        drawBoundBoxCheckBox.setText("Draw Bounding Boxes");
        drawBoundBoxCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawBoundBoxCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(VSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(HSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(drawBoundBoxCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(HSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(VSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(drawBoundBoxCheckBox)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(settingsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void VSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_VSliderStateChanged
        // TODO add your handling code here:
         tree.setVSpace(VSlider.getValue());
         
         Graphics g=drawingPanel.getGraphics();
         drawingPanel.paintComponent(g);
        
    }//GEN-LAST:event_VSliderStateChanged

    private void HSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_HSliderStateChanged
        // TODO add your handling code here:
         tree.setHSpace(HSlider.getValue());
         
         Graphics g=drawingPanel.getGraphics();
         drawingPanel.paintComponent(g);
    }//GEN-LAST:event_HSliderStateChanged

    private void drawBoundBoxCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawBoundBoxCheckBoxActionPerformed
        // TODO add your handling code here:
        Graphics g=drawingPanel.getGraphics();
        drawingPanel.paintComponent(g);
    }//GEN-LAST:event_drawBoundBoxCheckBoxActionPerformed

    private void topAlignRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topAlignRadioButtonActionPerformed
        // TODO add your handling code here:
        Graphics g=drawingPanel.getGraphics();
        drawingPanel.paintComponent(g);
    }//GEN-LAST:event_topAlignRadioButtonActionPerformed

    private void bottomAlignRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottomAlignRadioButtonActionPerformed
        // TODO add your handling code here:
        Graphics g=drawingPanel.getGraphics();
        drawingPanel.paintComponent(g);
    }//GEN-LAST:event_bottomAlignRadioButtonActionPerformed
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider HSlider;
    private javax.swing.ButtonGroup SubtreeAlignmentbuttonGroup;
    private javax.swing.JSlider VSlider;
    private javax.swing.JRadioButton bottomAlignRadioButton;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JCheckBox drawBoundBoxCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JRadioButton topAlignRadioButton;
    // End of variables declaration//GEN-END:variables

     
    /**
     * Handles property change events. If the property change is from a component containing a node object, retrieves its node object, and updates its view. 
     * 
     * @param evt event object with the new value
     */
   @Override
    public void propertyChange(PropertyChangeEvent evt) {
        CNode vNode;
        if(evt.getSource()==NodeObject){
            vNode=NodeObject.getNode();
            if(vNode instanceof CECFGNode){
                setNode(parseTreeGraph.ECFGNodetoTreeNode((CECFGNode)vNode));
            }else if(vNode instanceof CRE){
                setNode(reTreeGraph.RENodetoTreeNode((CRE)vNode)); 
            }else if(vNode instanceof CNode){
                 setNode(astTreeGraph.ASTNodetoTreeNode((CNode)vNode)); 
                
            }else{
                JOptionPane.showMessageDialog(this,
                "Parse Tree, Tree is not supported","Invalid Tree",
                 JOptionPane.ERROR_MESSAGE); 
            }
           
        }
    }
    
    /**
     * Get the value of NodeObject
     *
     * @return the value of NodeObject
     */
    public INodeObject getNodeObject(){
        return NodeObject;
    }
    /**
     * Connects to any component holding a node object via its interface -- Set the value of <code>NodeObject</code>.
     * Register for property change events, retrieve current value of a node object and update the treegraph view.
     *
     * @param aNodeObject new value of NodeObject
     */
   public void setNodeObject(INodeObject aNodeObject){
       CTreeNode vNode=null;
       
       if(NodeObject!=null){
              NodeObject.removePropertyChangeListener(this);
       }
       NodeObject=aNodeObject;
       if(NodeObject!=null){
              NodeObject.addPropertyChangeListener(this);
              vNode=transformTree(NodeObject.getNode());
       } 
        setNode(vNode);
       
   }

    /**
     * Returns a graph generated from the specified node.
     * 
     * @param aNode the node to transform into a graph.
     * @return the graph corresponding to the node specified.
     */
    public CTreeNode transformTree(CNode aNode){
       treeNode=initialNode();
       if(aNode !=null){
            if(aNode instanceof CECFGNode){
                    return parseTreeGraph.ECFGNodetoTreeNode((CECFGNode)aNode);  
            }else if(aNode instanceof CRE){
                    return reTreeGraph.RENodetoTreeNode((CRE)aNode);   
            }else if(aNode instanceof CNode){
                return astTreeGraph.ASTNodetoTreeNode((CNode)aNode);
            }else return treeNode;
       }else return treeNode;
  }
           
    /**
     * Returns a graph for this TreeGraphView.
     * 
     * @return the CTreeNode object.
     */
    public CTreeNode getNode() {
        return treeNode;
    }

    /**
     * Sets the graph to be displayed by this TreeGraphView.
     * 
     * @param treeNode the graph to display.
     */
    public void setNode(CTreeNode treeNode) {
        this.treeNode = treeNode;
        Graphics g=drawingPanel.getGraphics();
        if(g!=null){
         paintComponent(g);
        }
       
    }
    private DrawingPanel drawingPanel;

    /**
     *
     */
    public CTreeGraph tree;
    Rectangle r;
   
    private class DrawingPanel extends JPanel{
        public DrawingPanel(){
            
            setBackground(Color.white); // set the background color to white
            setPreferredSize(new Dimension(300, 200));

           
        }
        /**
         * Updates the TreeGraphView.
         */
        public void upDateSettings(){
            tree.setHSpace(HSlider.getValue());
            tree.setVSpace(VSlider.getValue());
            tree.setMargin(4);
            tree.setDrawBoundingBoxes(drawBoundBoxCheckBox.isSelected());
            if(topAlignRadioButton.isSelected()){
                tree.setSubTreeAlignment(CHorizontalAlignment.TOPALIGNED);
            }else if (bottomAlignRadioButton.isSelected()){
               tree.setSubTreeAlignment(CHorizontalAlignment.BOTTOMALIGNED);
            }
        }
     /**
      * Draws the treegragh with the specified graphics object.
      * 
      * @param g the specified Graphics context. 
      */
        public void doDrawing(Graphics g) {
            tree =new CTreeGraph(treeNode);
            upDateSettings();
            tree.calculateLayout(g);
             //drawingPanel.setPreferredSize(new Dimension(Math.max(100, tree.getRoot().getWidth()),tree.getRoot().getHeight()+30));
            r=new Rectangle(0,0,Math.max(100, tree.getRoot().getWidth())+30,tree.getRoot().getHeight()+30);
            drawingPanel.setBounds(r);
            tree.draw(g);
            drawingPanel.revalidate();
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            doDrawing(g);
        }
    }
    private void initAddedComponents() {
        // place initialization code for panels here
        drawingPanel=new DrawingPanel();
        JScrollPane sp = new JScrollPane();
        sp.setViewportView(drawingPanel);
        displayPanel.setLayout(new BorderLayout());
        displayPanel.add(sp,BorderLayout.CENTER);
        displayPanel.setPreferredSize(new Dimension(100, 100)); 
    }
    
    }
