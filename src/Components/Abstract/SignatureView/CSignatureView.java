/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CSign.java
 *
 * Created on 12-dec-2011, 12:11:13
 */
package Components.Abstract.SignatureView;

import Components.Abstract.Signature.ISignatureComp;
import Signatures.CSignature;
import Signatures.CSortCtxt;
import Signatures.CSortDefinition_List;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.table.DefaultTableModel;

/**
 * A table view for inspecting the textual representation of a signature.
 * 
 * 
 * @author Jackline Ssanyu (jssanyu@kyu.ac.ug)
 */
public class CSignatureView extends javax.swing.JPanel  implements PropertyChangeListener {
    private ISignatureComp Signature=null;
    private DefaultTableModel tb;

    /** Creates new form CSign */
    public CSignatureView() {
        tb=new DefaultTableModel(2,2);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblSignature = new javax.swing.JTable();

        tblSignature.setModel(tb);
        jScrollPane1.setViewportView(tblSignature);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 407, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSignature;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        Object source=evt.getSource();
        if(source==Signature)
             updateSignatureView(Signature.getSignatureStructure());
    }
    
    /**
     *
     * @param aSignatureStructure
     */
    public void buildSignatureTableModel(CSignature aSignatureStructure){
        //Build a Table model
        //1. Set column names
         String[] fColumnNames={"Sort Name","Sort Body"};
        //2. Get States
         Object rowData[][] =new Object[aSignatureStructure.getUserSortCtxt().getSortDefs().contextCount()][fColumnNames.length];
         
        //3. Get row data
         for(int i=0; i<aSignatureStructure.getUserSortCtxt().getSortDefs().contextCount();i++){
             rowData[i][0]=aSignatureStructure.getUserSortCtxt().getSortDefs().getElt(i).getName();
             rowData[i][1]=aSignatureStructure.getUserSortCtxt().getSortDefs().getElt(i).getBody().toText();
         } 
          
          tb = new DefaultTableModel(rowData,fColumnNames);
        
         //4. Set the model just built as model of TableView
          tblSignature.setModel(tb);
     }
    
    /**
     *
     * @return
     */
    public ISignatureComp getSignature(){
        return Signature;
 }

    /**
     *
     * @param aSignature
     */
    public void setSignature(ISignatureComp aSignature){
       CSignature vSignatureStructure;
       if(Signature!=null){
              Signature.removePropertyChangeListener(this);
       }
       Signature=aSignature;
       if(Signature!=null){
              Signature.addPropertyChangeListener(this);
              vSignatureStructure=Signature.getSignatureStructure();

       } else {
            vSignatureStructure=new CSignature(new CSortCtxt(new CSortDefinition_List()));
       }
       updateSignatureView(vSignatureStructure);
    }
   
    /**
     *
     * @param aSignatureStructure
     */
    public void updateSignatureView(CSignature aSignatureStructure){
       buildSignatureTableModel(aSignatureStructure);
   }
}
