/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SignatureEditor.java
 *
 * Created on 12-dec-2011, 15:31:31
 */
package Components.Abstract.Signature;

import Signatures.CMemberDefinition_List;
import Signatures.CSignature;
import Analyzers.CSignatureAnalyzer;
import Signatures.CSortCtxt;
import Signatures.CSortDefinition;
import Signatures.CSortDefinition_List;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 * An editor for editing a signature in a structure preserving way.
 *
 * 
 * 
 * @author Jackline Ssanyu (jssanyu@kyu.ac.ug)
 */
public class CSignatureEditor extends javax.swing.JPanel {

    /**
     *
     */
    protected CSignature fSignatureStructure;
    
     private DefaultTableModel tbSort;
     
     private TermsTableModel tbTerm;
     private CtxtTableModel tbCtxt;
     private DataTableModel tbData;
     private RefTableModel tbRef;
     
     private String[] fSortColumnNames;
    // private String[] fRoleColumnNames;
     
     private CSignatureAnalyzer vAnalyzer;
     
     private SignatureComboBoxModel cmbAncestorModel;
     private SignatureComboBoxModel colModModel;
     private SignatureComboBoxModel ctxtTypeModel;
   //  private SignatureComboBoxModel termTypeModel;
   //  private SignatureComboBoxModel colTypeModel;
     //private  String[] fDataColumnNames;
     //private  String[] fTermColumnNames;
     //private  String[] fRefColumnNames;
    /** Creates new form SignatureEditor */
     public CSignatureEditor() {
        cmbAncestorModel = new SignatureComboBoxModel();
        colModModel = new SignatureComboBoxModel();
        
        tbTerm = new TermsTableModel();
        tbCtxt = new CtxtTableModel();
        tbData = new DataTableModel();
        tbRef = new RefTableModel();
       
        ctxtTypeModel= new SignatureComboBoxModel();
        
        
        // colTypeModel = new SignatureComboBoxModel();
        fSignatureStructure=new CSignature(new CSortCtxt(new CSortDefinition_List())); 
        vAnalyzer=new CSignatureAnalyzer();
        initTables();
        initComponents();
       
        tblCtxt.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {
                 tblCtxtTableChanged(evt);
            }
        });
        setUpCtxtTypeCol(tblCtxt.getColumnModel().getColumn(1));
        
      /* tblTerm.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {
                 tblTermTableChanged(evt);
            }
       });
       
       tblData.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {
                 tblDataTableChanged(evt);
            }
        });
       
       tblRef.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {
                 tblRefTableChanged(evt);
            }
        });*/
        
       // 
       // setUpTermTypeCol(tblTerm.getColumnModel().getColumn(1));
       // setUpTypeCol(tblData.getColumnModel().getColumn(1));
      //  setUpTypeCol(tblRef.getColumnModel().getColumn(1));
        
       setUpModCol(tblCtxt.getColumnModel().getColumn(2));
       setUpModCol(tblTerm.getColumnModel().getColumn(2));
       setUpModCol(tblData.getColumnModel().getColumn(2));
       setUpModCol(tblRef.getColumnModel().getColumn(2));
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblSortCtxt = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCtxt = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRef = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblTerm = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblTerm = new javax.swing.JLabel();
        lblData = new javax.swing.JLabel();
        lblCtxt = new javax.swing.JLabel();
        lblRef = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbAncestor = new javax.swing.JComboBox( cmbAncestorModel);

        tblSortCtxt.setModel(tbSort);
        jScrollPane1.setViewportView(tblSortCtxt);
        tblSortCtxt.setRowSelectionAllowed(true);
        ListSelectionModel sortCtxtRowSelectionModel = tblSortCtxt.getSelectionModel();
        sortCtxtRowSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        sortCtxtRowSelectionModel.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                tblSortCtxtValueChanged(e);
            }
        });

        tblCtxt.setModel(tbCtxt);
        jScrollPane2.setViewportView(tblCtxt);

        tblRef.setModel(tbRef);
        jScrollPane3.setViewportView(tblRef);

        tblTerm.setModel(tbTerm);
        jScrollPane4.setViewportView(tblTerm);

        tblData.setModel(tbData);
        jScrollPane5.setViewportView(tblData);

        jLabel1.setText("Sorts:");

        lblTerm.setText("Terms:");

        lblData.setText("Data:");

        lblCtxt.setText("Context:");

        lblRef.setText("References:");

        jLabel6.setText("Ancestor:");

        cmbAncestor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAncestorActionPerformed(evt);
            }
        });
        cmbAncestor.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                cmbAncestorAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbAncestor, 0, 116, Short.MAX_VALUE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                                .addGap(39, 39, 39))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCtxt)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblData, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRef, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cmbAncestor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblRef)
                    .addComponent(lblCtxt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, 0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblTerm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(132, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void cmbAncestorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAncestorActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_cmbAncestorActionPerformed

private void cmbAncestorAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_cmbAncestorAncestorAdded
// TODO add your handling code here:
}//GEN-LAST:event_cmbAncestorAncestorAdded

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbAncestor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblCtxt;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblRef;
    private javax.swing.JLabel lblTerm;
    private javax.swing.JTable tblCtxt;
    private javax.swing.JTable tblData;
    private javax.swing.JTable tblRef;
    private javax.swing.JTable tblSortCtxt;
    private javax.swing.JTable tblTerm;
    // End of variables declaration//GEN-END:variables

   private void initTables() { 
        fSortColumnNames=new String[]{"Name","Body"};
       // fRoleColumnNames=new String[]{"Name","Type","Modifier"};
        tbSort=new DefaultTableModel(fSortColumnNames,6);
       // tbCtxt=new DefaultTableModel(fRoleColumnNames,3);
       // tbTerm=new DefaultTableModel(fRoleColumnNames,3);
       // tbData=new DefaultTableModel(fRoleColumnNames,3);
       // tbRef=new DefaultTableModel(fRoleColumnNames,3);
    }
    
    /**
     *
     * @param aSignatureStructure
     */
    public void setSignatureStructure(CSignature aSignatureStructure){
        fSignatureStructure=aSignatureStructure;
    }
    
    /**
     *
     * @param aSignatureStructure
     */
    public void initEditorComponents(CSignature aSignatureStructure){
        fSignatureStructure=aSignatureStructure;
        vAnalyzer.setSignature(fSignatureStructure);
        buildSortsTableModel(fSignatureStructure.getUserSortCtxt().getSortDefs());
        buildcmbAncestorModel(fSignatureStructure.getUserSortCtxt().getSortDefs());
    }
    
    private void buildcmbAncestorModel(CSortDefinition_List aList){ 
         String vName="";
         ArrayList<String> vList=new ArrayList<String>();
         for(int i=0;i<aList.contextCount();i++){
             vName=aList.getElt(i).getBody().getAncestor().getName();
             if(!vList.contains(vName)){
                 vList.add(vName);
             }
         }
         for(int i=0;i<vList.size();i++){
             cmbAncestorModel.addElement((String)vList.get(i));
         }
         cmbAncestor.setModel(cmbAncestorModel);
   }
    
   private void buildSortsTableModel(CSortDefinition_List aList){
        //Build a Table model
         Object rowData[][] =new Object[aList.contextCount()][fSortColumnNames.length];
         for(int i=0; i<aList.contextCount();i++){
             rowData[i][0]=aList.getElt(i).getName();
             rowData[i][1]=aList.getElt(i).getBody().toText();
         } 
         tbSort = new DefaultTableModel(rowData,fSortColumnNames);
         tblSortCtxt.setModel(tbSort);
   }
   
   private void tblCtxtTableChanged(TableModelEvent evt) {
         
   }
   
   private void tblTermTableChanged(TableModelEvent evt) {
                
   }
   private void tblDataTableChanged(TableModelEvent evt) {
         
   }
   
   private void tblRefTableChanged(TableModelEvent evt) {
               
   }
   private void tblSortCtxtValueChanged(ListSelectionEvent e){
        CSortDefinition_List vList;
        CMemberDefinition_List vMemList;
        int vSelectedRow;
        String vSelectedSort;
        CSortDefinition vSortDef;
        String vAncestor="";
        
        clearTables();
        
        vSelectedRow = tblSortCtxt.getSelectedRow();
        vSelectedSort= (String)tblSortCtxt.getValueAt(vSelectedRow, 0);
        
        //set cmbAncestor to ancestor of selected sort
        clearAncestorList();
        vSortDef=vAnalyzer.findSortDef(vSelectedSort);
        vAncestor=vSortDef.getBody().getAncestor().getName();
        vList=new CSortDefinition_List();
        vList=vAnalyzer.allAncestors(vAnalyzer.findSortDef(vAncestor));
        for(int i=0;i<vList.contextCount();i++){
            cmbAncestorModel.addElement(vList.getElt(i).getName());
        }
        cmbAncestorModel.setSelectedItem(vAncestor);
        cmbAncestor.repaint();
       
        
        vMemList=new CMemberDefinition_List();
        vMemList.addAll(vAnalyzer.membersPerRole(vSelectedSort,'C'));
        if(vMemList.contextCount()>0){
          tbCtxt.updateCtxtTable(vMemList);
        }
        
        vMemList=new CMemberDefinition_List();
        vMemList.addAll(vAnalyzer.membersPerRole(vSelectedSort,'T'));
        if(vMemList.contextCount()>0){
          tbTerm.updateTermsTable(vMemList);
        }
        
        vMemList=new CMemberDefinition_List();
        vMemList.addAll(vAnalyzer.membersPerRole(vSelectedSort,'D'));
        if(vMemList.contextCount()>0){
         tbData.updateDataTable(vMemList);
        }
        
        vMemList=new CMemberDefinition_List();
        vMemList.addAll(vAnalyzer.membersPerRole(vSelectedSort,'R'));
        if(vMemList.contextCount()>0){
          tbRef.updateRefTable(vMemList);
        }
   
   }
     
 /*  private void buildCtxtTableModel(CMemberDefinition_List aMemList){// I need to reconsider how the column model is defined.
          Object rowData[][] =new Object[aMemList.contextCount()][fRoleColumnNames.length];
          
          CMemberDefBody vBody=null;
          
          for(int i=0; i<aMemList.contextCount();i++){
             rowData[i][0]=aMemList.getElt(i).getName();
             vBody=aMemList.getElt(i).getBody();
             rowData[i][1]=vBody.getType().toText();
             rowData[i][2]=vBody.getModifier(); 
          } 
         // tbCtxt = new DefaultTableModel(rowData,fRoleColumnNames);
          tblCtxt.setModel(tbCtxt);
         
          setUpCtxtTypeCol(tblCtxt.getColumnModel().getColumn(1));
          setUpModCol(tblCtxt.getColumnModel().getColumn(2));
          
          // Fill type col
          for(int i=0; i<aMemList.contextCount();i++){
             fillCtxtTypeCol(aMemList.getElt(i).getBody());
          }
     }*/
      
   /*  private void fillCtxtTypeCol(CMemberDefBody aBody){
         //assert vbody==null
         CSortDefinition vSortDef;
         ArrayList<String> vAncestors=new ArrayList<String>();
               
         vSortDef=aBody.getType().getSortDef();
         while(vSortDef!=null ){
            vAncestors.add(vSortDef.getName());
            vSortDef=vAnalyzer.ancestor(vSortDef);
         }
         
         ctxtTypeModel.clear();
         for(int i=0;i<vAncestors.size();i++){
             ctxtTypeModel.addElement(vAncestors.get(i));
         }
         ctxtTypeModel.addElement(vSortDef.getName());
    }*/
     
 /*    private void buildDataTableModel(CMemberDefinition_List aMemList){
          Object rowData[][] =new Object[aMemList.contextCount()][fRoleColumnNames.length];
          
          CMemberDefBody vBody;
          for(int i=0; i<aMemList.contextCount();i++){
             rowData[i][0]=aMemList.getElt(i).getName();
             vBody=aMemList.getElt(i).getBody();
             rowData[i][1]=vBody.getType().toText();
             rowData[i][2]=vBody.getModifier();
          } 
          tbData = new DefaultTableModel(rowData,fRoleColumnNames);
          tblData.setModel(tbData);
          
          setUpTypeCol(tblData.getColumnModel().getColumn(1));
          setUpModCol(tblData.getColumnModel().getColumn(2));
     }*/
     
   /*  private void buildRefTableModel(CMemberDefinition_List aMemList){
          Object rowData[][] =new Object[aMemList.contextCount()][fRoleColumnNames.length];
          
          CMemberDefBody vBody;
          for(int i=0; i<aMemList.contextCount();i++){
             rowData[i][0]=aMemList.getElt(i).getName();
             vBody=aMemList.getElt(i).getBody();
             rowData[i][1]=vBody.getType().toText();
             rowData[i][2]=vBody.getModifier();
          } 
          tbRef = new DefaultTableModel(rowData,fRoleColumnNames);
          tblRef.setModel(tbRef);
          
          setUpTypeCol(tblRef.getColumnModel().getColumn(1));  
          setUpModCol(tblRef.getColumnModel().getColumn(2));
     }*/
     
     private void setUpModCol(TableColumn modifierColumn) {
        colModModel.clear();
        colModModel.addElement("*");
        colModModel.addElement("+");
        colModModel.addElement("?");
        colModModel.addElement("BLANK");
        JComboBox comboBox = new JComboBox(colModModel);
        modifierColumn.setCellEditor(new DefaultCellEditor(comboBox));
     }
     
     private void setUpCtxtTypeCol(TableColumn typeColumn) {
        ctxtTypeModel.clear();
        JComboBox comboBox = new JComboBox(ctxtTypeModel);
        typeColumn.setCellEditor(new DefaultCellEditor(comboBox));
     }
     
   /*  private void setUpTermTypeCol(TableColumn typeColumn) {
       // termTypeModel.clear();
        JComboBox comboBox = new JComboBox(termTypeModel);
        typeColumn.setCellEditor(new DefaultCellEditor(comboBox));
     }*/

   /*  private void setUpTypeCol(TableColumn typeColumn) {
        colTypeModel.clear();
        JComboBox  comboBox = new JComboBox(colTypeModel);
        typeColumn.setCellEditor(new DefaultCellEditor(comboBox));
     }*/

   /*  private void buildTermTableModel(CMemberDefinition_List aMemList){
          Object rowData[][] =new Object[aMemList.contextCount()][fRoleColumnNames.length];
          
          CMemberDefBody vBody;
          for(int i=0; i<aMemList.contextCount();i++){
             rowData[i][0]=aMemList.getElt(i).getName();
             vBody=aMemList.getElt(i).getBody();
             rowData[i][1]=vBody.getType().toText();
             rowData[i][2]=vBody.getModifier();
          } 
         // tbTerm = new DefaultTableModel(rowData,fRoleColumnNames);
          tblTerm.setModel(tbTerm);
          
          setUpTermTypeCol(tblTerm.getColumnModel().getColumn(1));
          setUpModCol(tblTerm.getColumnModel().getColumn(2));
          
          for(int i=0; i<aMemList.contextCount();i++){
             fillTermTypeCol(aMemList.getElt(i).getBody());
          }
     }*/
     
 /*    private void fillTermTypeCol(CMemberDefBody aBody){
         //assert vbody==null
         CSortDefinition vSortDef;
         ArrayList<String> vAncestors=new ArrayList<String>();
         
         termTypeModel = new SignatureComboBoxModel();
         vSortDef=aBody.getType().getSortDef();
         while(vSortDef!=null){
            vAncestors.add(vSortDef.getName());
            vSortDef=vAnalyzer.ancestor(vSortDef);
         }
         for(int i=0;i<vAncestors.size();i++){
             termTypeModel.addElement(vAncestors.get(i));
         }
     }*/
     
     private void clearAncestorList(){
        cmbAncestorModel.clear(); 
     }
     private void clearTables(){
       tbTerm.updateTermsTable(new CMemberDefinition_List());
       tbCtxt.updateCtxtTable(new CMemberDefinition_List());
       tbData.updateDataTable(new CMemberDefinition_List());
       tbRef.updateRefTable(new CMemberDefinition_List()); 
       
       
      
       //clear table models
     /* tbTerm = new TermsTableModel();
        tbCtxt = new CtxtTableModel();
        tbData = new DataTableModel();
        tbRef = new RefTableModel();
         
        tblCtxt.setModel(tbCtxt);
        tblTerm.setModel(tbTerm);
        tblData.setModel(tbData);
        tblRef.setModel(tbRef);*/
       
       // tbCtxt=new DefaultTableModel(fRoleColumnNames,3);
       // tbTerm=new DefaultTableModel(fRoleColumnNames,3);
      //  tbData=new DefaultTableModel(fRoleColumnNames,3);
       // tbRef=new DefaultTableModel(fRoleColumnNames,3);
        
      /**/
        
      //  setUpTermTypeCol(tblTerm.getColumnModel().getColumn(1));
     //   setUpTypeCol(tblData.getColumnModel().getColumn(1));
          setUpCtxtTypeCol(tblCtxt.getColumnModel().getColumn(1));
    //    setUpTypeCol(tblRef.getColumnModel().getColumn(1));
        
      //  setUpModCol(tblCtxt.getColumnModel().getColumn(2));
       // setUpModCol(tblTerm.getColumnModel().getColumn(2));
    //    setUpModCol(tblData.getColumnModel().getColumn(2));
    //    setUpModCol(tblRef.getColumnModel().getColumn(2));
         
     }
}
