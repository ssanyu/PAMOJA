/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package Components.Lexical.RichTextEditor;

import Components.CoreHybridEditor.ICoreHybridEditorComp;
import Components.IPAMOJAComponent;
import Components.Lexical.SymbolStyleCustomizer.ISymbolStyleCustomizerComp;
import Components.Lexical.Scanners.IScannerComp;
import Components.Lexical.Stream2Text.ISymbolstream2TextComp;
import Components.Specifications.Presentation.IPresentationComp;



/**
 * Defines services for interacting with other components like, Scanner and SymbolStyleCustomizer.
 * 
 * @author Jackline Ssanyu (jssanyu@kyu.ac.ug)
 */
public interface IRichTextEditor extends IPAMOJAComponent {

    /**
     * Determines if text highlighting is enabled for this RichTextView.
     * @return <code>true</code> if text highlighting is enabled, else <code>false</code>.
     */
    boolean isHighlighting();

    /**
     * Sets the text highlighting mode of this RichTextView to the specified value.
     * 
     * @param aHighlighting  <code>true</code> if text highlighting, else <code>false</code>.
     */
    void setHighlighting(boolean aHighlighting);

    /**
     * Returns a reference to the Scanner Component connected.
     * @return a reference to the Scanner
     */
    IScannerComp getScanner();

    /**
     * Connects to the Scanner component with the specified interface.
     * 
     * @param aDFAScanner the interface of the Scanner component.
     */
    void setScanner(IScannerComp aDFAScanner);
    
    /**
     * Returns a reference to the SymbolStyleCustomizer Component connected.
     * @return a reference to the SymbolStyleCustomizer
     */
    ISymbolStyleCustomizerComp getSymbolStyleCustomizer();

     /**
     * Connects to the SymbolStyleCustomizer component with the specified interface.
     * 
     * @param aSymbolStyleCustomizer the interface of the SymbolStyleCustomizer component.
     */
    void setSymbolStyleCustomizer(ISymbolStyleCustomizerComp aSymbolStyleCustomizer);
    
    /**
     * Returns a reference to the Stream2Text Component connected.
     * @return a reference to the Stream2Text
     */
    ISymbolstream2TextComp getStreamtoText();

     /**
     * Connects to the Stream2Text component with the specified interface.
     * 
     * @param aStreamtoText the interface of the Stream2Text component.
     */
    void setStreamtoText(ISymbolstream2TextComp aStreamtoText);
  
    /**
     * Connects to the CoreHybridEditor component with the specified interface.
     * 
     * @param aHybridEditor the interface of the CoreHybridEditor component.
     */
    void setHybridEditor(ICoreHybridEditorComp aHybridEditor);

    /**
     * Returns a reference to the CoreHybridEditor Component connected.
     * @return a reference to the CoreHybridEditor
     */
    ICoreHybridEditorComp getHybridEditor();
    
    /**
     * Connects to the Presentation component with the specified interface.
     * 
     * @param presentation the interface of the Presentation component.
     */
    void setPresentation(IPresentationComp presentation);

   /**
     * Returns a reference to the Presentation Component connected.
     * @return a reference to the Presentation
     */
    IPresentationComp getPresentation();
    
    
    
  /* Invariant 1: Either Text="" or
   *              If Text.length()>0,Highlighting=false, Scanner!=null then
   *              domain of tokens in the LexicalHighLighter is equivalent to domain of the TokenStream generated by the Scanner.
   * Invariant 2: If Text.length()>0, Highlighting=true, SymbolStyleCustomizer=!null, DFAScanner!=null then
   *              domain of tokens in the LexicalHighLighter is equivalent to domain of TokenStream and domain of the SymbolStyleCustomizer.
   */

}
