; Oberon0 Box Patterns

;====== or Patterns =========
Condition=Sel(TermData(hole,<Condition>))
Statement=Sel(TermData(hole,<Statement>))
Program=Sel(TermData(hole,<Program>))
Expression=Sel(TermData(hole,<Expression>))
Var=Sel(TermData(hole,<Var>))
ElseIf=Sel(TermData(hole,<ElseIf>))
Type=Sel(TermData(hole,<Type>))
Declaration=Sel(TermData(hole,<Declaration>))
CasePart=Sel(TermData(hole,<CasePart>))
FParameter=Sel(TermData(hole,<FParameter>))
AParameters=Sel(TermData(hole,<AParameters>))
FParameters=Sel(TermData(hole,<FParameters>))
ReturnExp=Sel(TermData(hole,<ReturnExp>))
ReturnExpType=Sel(TermData(hole,<ReturnExpType>))
FSequence=Sel(TermData(hole,<FSequence>))
Selector=Sel(TermData(hole,<Selector>))

;====== and Patterns ==========
Module=Sel(Ver([Hor([Hor([Term(module),Node(0)],1),Term(semicolon)],0),Ind(Node(1)),Term(begin),Ind(Node(2)),Hor([Hor([Term(end),Node(3)],1)],0)],0))
ConstantDeclaration=Sel(Hor([Term(const),Node(0),Term(equals),Node(1)],1))
VariableDeclaration=Sel(Hor([Node(0),Term(colon),Node(1)],1))
ProcedureDeclaration=Sel(Ver([Hor([Hor([Term(procedure),Node(0),Node(1),Node(2)],1),Term(semicolon)],0),Ind(Node(3)),Term(begin),Ind(Node(4)),Ind(Node(5)),Hor([Term(end),Node(6)],1)],0))
Assignment=Sel(Hor([Hor([Node(0),Node(1),Term(becomes),Node(2)],1),Term(semicolon)],0))
ProcedureCall=Sel(Hor([Hor([Term(call),Node(0),Node(1)],1),Node(2),Term(semicolon)],0))
FormalParameter=Sel(Hor([Node(0),Term(colon),Node(1)],0))
FormalParameters=Sel(Hor([Term(open),Node(0),Term(close)],0))
ActualParameters=Sel(Hor([Term(open),Node(0),Term(close)],0))
FieldSequence=Sel(Hor([Node(0),Term(colon),Node(1)],0))
If=Sel(Ver([Hor([Term(if),Node(0),Term(then)],1),Ind(Node(1)),Node(2),Term(else),Ind(Node(3)),Term(end)],0))
ElseIfPart=Sel(Ver([Hor([Term(elsif),Node(0),Term(then)],1),Ind(Node(1))],0))
Repeat=Sel(Ver([Term(repeat),Ind(Node(0)),Hor([Term(until),Node(1)],1)],0))
While=Sel(Ver([Hor([Term(while),Node(0),Term(do)],1),Ind(Node(1)),Term(end)],0))
Case=Sel(Ver([Hor([Term(case),Node(0),Term(of)],1),Ind(Node(1)),Term(else),Ind(Node(2)),Term(end)],0))
CaseStat=Sel(Hor([Node(0),Term(colon),Node(1)],0))
DetailedWhile=Sel(Ver([Node(0),Hor([Term(while),Node(1),Term(do)],1),Ind(Node(2)),Ind(Node(3)),Term(end)],0))
DetailedRepeat=Sel(Ver([Node(0),Term(repeat),Ind(Node(1)),Ind(Node(2)),Hor([Term(until),Node(3)],1)],0))
For=Sel(Ver([Hor([Term(for),Node(0),Term(becomes),Node(1),Term(to),Node(2),Term(by),Node(3),Term(do)],1),Ind(Node(4)),Term(end)],0))
Read=Sel(Hor([Hor([Term(read),Node(0)],1),Term(semicolon)],0))
Write=Sel(Hor([Hor([Term(write),Node(0)],1),Term(semicolon)],0))
RelationalCondition=Sel(Hor([Node(0),Data(relOp,0),Node(1)],1))
Negation=Sel(Hor([Data(unOp,0),Node(0)],1))
Variable=Sel(Hor([Node(0),Node(1),Node(2)],0))
VariableId=Sel(Data(ident,0))
Constant=Sel(Data(number,0))
BracketExpression=Sel(Hor([Term(open),Node(0),Data(allOps,0),Node(1),Term(close)],1))
BoolExpression=Sel(Data(boolConst,0))
BasicType=Sel(Data(btype,0))
ArrayType=Sel(Hor([Term(array),Node(0),Term(of),Node(1)],1))
RecordType=Sel(Ver([Term(record),Ind(Node(0)),Term(end)],0))
FieldSelector=Sel(Hor([Term(dot),Node(0)],0))
ArraySelector=Sel(Hor([Term(squareOpen),Node(0),Term(squareClose)],0))
Return=Sel(Hor([Hor([Term(return),Node(0)],1),Term(semicolon)],0))
ReturnType=Sel(Hor([Term(colon),Node(0)],1))
;======List Patterns======================
CasePart_List1=Sel(VerSep(Term(),Term(bar),Term()))
Expression_List1=Sel(HorSep(Term(),Term(comma),Term()))
Expression_List0=Sel(HorSep(Term(),Term(comma),Term()))
Var_List1=Sel(HorSep(Term(),Term(comma),Term()))
Statement_List1=Sel(VerSep(Term(),Term(),Term()))
Statement_List0=Sel(VerSep(Term(),Term(),Term()))
Declaration_List1=Sel(VerSep(Term(),Term(),Term()))
Declaration_List0=Sel(VerSep(Term(),Term(),Term()))
ElseIf_List0=Sel(VerSep(Term(),Term(),Term()))
FParameter_List1=Sel(HorSep(Term(),Term(semicolon),Term()))
FSequence_List1=Sel(VerSep(Term(),Term(semicolon),Term()))
Selector_List0=Sel(HorSep(Term(),Term(),Term()))
;======Option Patterns======================
FParameters_Option=Sel(Node(0))
AParameters_Option=Sel(Node(0))
ReturnExp_Option=Sel(Node(0))
ReturnExpType_Option=Sel(Node(0))