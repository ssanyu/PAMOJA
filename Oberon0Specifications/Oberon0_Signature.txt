;Signature for Oberon0

;Sorts ======================================================

Statement=<TermTuple
Condition=<TermTuple
Expression=<TermTuple
Program=<TermTuple
Var=<TermTuple
Declaration=<TermTuple
Type=<TermTuple
ElseIf=<TermTuple
CasePart=<TermTuple
FParameter=<TermTuple
FSequence=<TermTuple
Selector=<TermTuple
FParameters=<TermTuple
AParameters=<TermTuple
ReturnExp=<TermTuple
ReturnExpType=<TermTuple


;Operators=======================================================
Module=T[id:Var,declarations:Declaration+,stats:Statement*,name:Var]<Program
ConstantDeclaration=T[name:Var,value:Expression]<Declaration
VariableDeclaration=T[varDecs:Var+, dataType:Type]<Declaration
ProcedureDeclaration=T[id:Var,fParameters:FParameters?,rType:ReturnExpType?,declarations:Declaration*,stats:Statement*,returnStat:ReturnExp?,name:Var]<Declaration
FormalParameter=T[varDecs:Var+,dataType:Type]<FParameter
FormalParameters=T[formalParameters:FParameter+]<FParameters
ActualParameters=T[actualParameters:Expression+]<AParameters
FieldSequence=T[varDecs:Var+,dataType:Type]<FSequence
Assignment=T[name:Var,selector:Selector*,expr:Expression] <Statement
ProcedureCall=T[name:Var,selector:Selector*,actualParas:AParameters?] <Statement
If=T[condition:Condition,thenStats:Statement+,elsIf:ElseIf*,elseStat:Statement*]<Statement
ElseIfPart=T[condition:Condition,thenStats:Statement+]<ElseIf
While=T[condition:Condition,body:Statement+]<Statement
DetailedWhile=T[init:Assignment,condition:Condition,body:Statement+,inc:Assignment]<Statement
Repeat=T[repeatStats:Statement+,condition:Condition]<Statement
DetailedRepeat=T[init:Assignment,repeatStats:Statement+,inc:Assignment,condition:Condition]<Statement
For=T[name:Var,exp:Expression,value:Expression,inc:Expression,stats:Statement+]<Statement
Case=T[exp:Expression,casePart:CasePart+,stats:Statement*]<Statement
CaseStat=T[exprs:Expression+,stats:Statement+]<CasePart
Read=T[name:Var]<Statement
Write=T[value:Expression]<Statement
RelationalCondition=T[leftExpr:Expression,rightExpr:Expression] D[relOperator:String]<Condition
Negation=T[expr:Expression] D[op:String] <Expression
Variable=T[name:Var,selector:Selector*,actualParameters:AParameters?]<Expression
VariableId=D[name:String]<Var
Constant=D[value:String]<Expression
BracketExpression=T[leftExpr:Expression,rightExpr:Expression]D[allOps:String]<Expression
BoolExpression=D[boolConst:String]<Expression
BasicType=D[name:String]<Type
ArrayType=T[exprs:Expression+,type:Type]<Type
RecordType=T[fields:FSequence+]<Type
FieldSelector=T[name:Var]<Selector
ArraySelector=T[exprs:Expression+]<Selector
Return=T[exprs:Expression]<ReturnExp
ReturnType=T[type:Type]<ReturnExpType