/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parservisualizer;


import Components.Concrete.Parser.SourceCodeGeneratedParser.Deterministic.CDeterministicParserSourceView;
import General.OpenFile;
import TableGenerators.LR.Accept;
import TableGenerators.LR.Move;
import TableGenerators.LR.Reject;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author HP
 */
public class ParserFrame extends javax.swing.JFrame {
   
   private String grammarText="";
   private JTextArea txtGrammar;
  
   
   
  
 
    /**
     * Creates new form ParserVisualizerFrame
     */
    public ParserFrame() {
        initComponents();
        setTitle("ParserViz: A visualizer for parsing algorithms");
       
        //Load a grammar panel
        
        loadGrammarPanel();
        freezeMenuItems();
        freezeButtons();
        makeComponentsInvisible();
          
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lblmsg = new javax.swing.JLabel();
        cmdStart = new javax.swing.JButton();
        cmdBack = new javax.swing.JButton();
        cmdStep = new javax.swing.JButton();
        cmdParseAll = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        framePane = new javax.swing.JSplitPane();
        RightPane = new javax.swing.JSplitPane();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtScan = new Components.Lexical.RichTextEditor.CRichTextEditor();
        jPanel7 = new javax.swing.JPanel();
        TreeView = new Components.GraphView.CGraphView();
        LeftPane = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        PaneGrammar = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LogView = new Components.Concrete.ParseLog.CParseLogView();
        jPanel4 = new javax.swing.JPanel();
        GrammarView = new Components.Concrete.GrammarViewer.CGrammarViewer();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableView = new Components.Concrete.ParseTablesView.CParseTableView();
        Grammar = new Components.Concrete.Grammar.CGrammarComp();
        NPDALL = new Components.Concrete.Parser.NPDA.NPDALL.CNPDALLComp();
        NPDALR = new Components.Concrete.Parser.NPDA.NPDALR.CNPDALRComp();
        LLParser = new Components.Concrete.LLParser.CLLParserComp();
        SLRParser = new Components.Concrete.Parser.TableDrivenParser.SLRParser.CSLRParserComp();
        SymbolStream = new Components.Lexical.SymbolStream.CSymbolStreamComp();
        TreeBuilder = new Components.Concrete.TreeBuilder.CECFGTreeBuilderComp();
        Scanner = new Components.Lexical.Scanners.TableDriven.CDFAScannerComp();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuGrammar = new javax.swing.JMenu();
        mnuNew = new javax.swing.JMenuItem();
        mnuLoad = new javax.swing.JMenuItem();
        mnuCommit = new javax.swing.JMenu();
        mnuGenerator = new javax.swing.JMenu();
        rbNPDALL = new javax.swing.JRadioButtonMenuItem();
        rbNPDALR = new javax.swing.JRadioButtonMenuItem();
        rbLL = new javax.swing.JRadioButtonMenuItem();
        rbSLR = new javax.swing.JRadioButtonMenuItem();
        rbParserSource = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblmsg.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblmsg.setForeground(new java.awt.Color(255, 0, 51));

        cmdStart.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdStart.setText("Start");
        cmdStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdStartActionPerformed(evt);
            }
        });

        cmdBack.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdBack.setText("Back");
        cmdBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdBackActionPerformed(evt);
            }
        });

        cmdStep.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdStep.setText("Step");
        cmdStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdStepActionPerformed(evt);
            }
        });

        cmdParseAll.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cmdParseAll.setText("Parse All");
        cmdParseAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdParseAllActionPerformed(evt);
            }
        });

        framePane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        framePane.setDividerLocation(300);

        RightPane.setDividerLocation(200);
        RightPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Input String:");

        txtScan.setScanner(Scanner);
        jScrollPane2.setViewportView(txtScan);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 772, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
        );

        RightPane.setLeftComponent(jPanel6);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TreeView, javax.swing.GroupLayout.DEFAULT_SIZE, 861, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TreeView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
        );

        RightPane.setRightComponent(jPanel7);

        framePane.setRightComponent(RightPane);

        LeftPane.setDividerLocation(200);
        LeftPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        PaneGrammar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jScrollPane1.setViewportView(LogView);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
        );

        PaneGrammar.addTab("Parse Log", jPanel5);

        GrammarView.setGrammar(Grammar);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 302, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addComponent(GrammarView, javax.swing.GroupLayout.PREFERRED_SIZE, 292, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(GrammarView, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
        );

        PaneGrammar.addTab("Grammar", jPanel4);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(PaneGrammar)
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PaneGrammar, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        LeftPane.setRightComponent(jPanel3);

        jScrollPane3.setViewportView(TableView);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 424, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE))
        );

        LeftPane.setLeftComponent(jPanel2);

        framePane.setLeftComponent(LeftPane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(framePane)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(framePane)
                .addGap(0, 0, 0))
        );

        NPDALL.setGrammar(Grammar);
        NPDALL.setSymbolStream(SymbolStream);

        NPDALR.setGrammar(Grammar);
        NPDALR.setSymbolStream(SymbolStream);

        LLParser.setGrammar(Grammar);
        LLParser.setSymbolStream(SymbolStream);

        SLRParser.setGrammar(Grammar);
        SLRParser.setSymbolStream(SymbolStream);
        SLRParser.setTreeBuilder(TreeBuilder);
        SLRParser.setTreeBuilding(true);

        SymbolStream.setScanner(Scanner);

        TreeBuilder.setMultiStick(true);
        TreeBuilder.setNoDataTerminal(true);
        TreeBuilder.setNonTerminal(true);

        Scanner.setGrammar(Grammar);

        mnuGrammar.setText("Grammar");
        mnuGrammar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        mnuNew.setText("New");
        mnuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNewActionPerformed(evt);
            }
        });
        mnuGrammar.add(mnuNew);

        mnuLoad.setText("Load");
        mnuLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLoadActionPerformed(evt);
            }
        });
        mnuGrammar.add(mnuLoad);

        jMenuBar1.add(mnuGrammar);

        mnuCommit.setText("Commit");
        mnuCommit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mnuCommit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mnuCommitStateChanged(evt);
            }
        });
        jMenuBar1.add(mnuCommit);

        mnuGenerator.setText("Generator");
        mnuGenerator.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        buttonGroup1.add(rbNPDALL);
        rbNPDALL.setText("NPDALL");
        rbNPDALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNPDALLActionPerformed(evt);
            }
        });
        mnuGenerator.add(rbNPDALL);

        buttonGroup1.add(rbNPDALR);
        rbNPDALR.setText("NPDALR");
        rbNPDALR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNPDALRActionPerformed(evt);
            }
        });
        mnuGenerator.add(rbNPDALR);

        buttonGroup1.add(rbLL);
        rbLL.setText("LL(1)");
        rbLL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbLLActionPerformed(evt);
            }
        });
        mnuGenerator.add(rbLL);

        buttonGroup1.add(rbSLR);
        rbSLR.setText("SLR(1)");
        rbSLR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSLRActionPerformed(evt);
            }
        });
        mnuGenerator.add(rbSLR);

        buttonGroup1.add(rbParserSource);
        rbParserSource.setText("Rec. Desc. Parser Source");
        rbParserSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbParserSourceActionPerformed(evt);
            }
        });
        mnuGenerator.add(rbParserSource);

        jMenuBar1.add(mnuGenerator);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Grammar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(NPDALL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(NPDALR, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LLParser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SLRParser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(SymbolStream, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblmsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(114, 114, 114)
                .addComponent(TreeBuilder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Scanner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(291, 291, 291)
                .addComponent(cmdStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdStep)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdBack)
                .addGap(10, 10, 10)
                .addComponent(cmdParseAll))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblmsg, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmdStart)
                        .addComponent(cmdStep)
                        .addComponent(cmdParseAll)
                        .addComponent(cmdBack))
                    .addComponent(Grammar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NPDALL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NPDALR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LLParser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SLRParser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SymbolStream, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TreeBuilder, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Scanner, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
   
    private void mnuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNewActionPerformed
        // TODO add your handling code here:
        loadGrammarPanel();
        txtGrammar.setText("");
        
    }//GEN-LAST:event_mnuNewActionPerformed

    private void mnuLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLoadActionPerformed
        // TODO add your handling code here:
        OpenFile f=new OpenFile();
        String vText=new String();
        loadGrammarPanel();
        vText=f.open("Open Grammar File", this);
        if(!vText.isEmpty()){
           txtGrammar.setText(vText);
        }
     
    }//GEN-LAST:event_mnuLoadActionPerformed

    private void mnuCommitStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mnuCommitStateChanged
        // TODO add your handling code here:
        if(txtGrammar.getText().length()!=0){
          Grammar.clear();
          Grammar.setGrammarText(txtGrammar.getText()); 
          unFreezeMenuItems();
        }else{
            JOptionPane.showMessageDialog(null, "Please enter a Grammar","ParserViz warning",
            JOptionPane.WARNING_MESSAGE);
        }
         
    }//GEN-LAST:event_mnuCommitStateChanged

    private void cmdStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdStartActionPerformed
        // TODO add your handling code here:
       
        lblmsg.setText(" ");
        if(!txtScan.getText().isEmpty()){
            if(rbSLR.isSelected()){
                SLRParser.start();
                TableView.setCellColor(SLRParser.r, SLRParser.c);
                TableView.repaint();
            }else if(rbLL.isSelected()){
                LLParser.start();
                TableView.setCellColor(LLParser.r, LLParser.c);
                TableView.repaint();
            }else if(rbNPDALL.isSelected()){
                NPDALL.start();
            }else if(rbNPDALR.isSelected()){
                NPDALR.start(); 
             
            }
        
        cmdStep.setEnabled(true); 
        cmdBack.setEnabled(false); 
    }
        
    }//GEN-LAST:event_cmdStartActionPerformed

    private void cmdStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdStepActionPerformed
        // TODO add your handling code here:
     if(rbNPDALR.isSelected()){
            NPDALR.parseStep();
            if(NPDALR.getParser().getAction().equals("Error")){
              lblmsg.setText("String is not accepted -- there are errors");
              cmdStep.setEnabled(false);
            }else if(NPDALR.getParser().getAction().equals("Accept")){
                  lblmsg.setText("String accepted");
                  cmdStep.setEnabled(false);
            }         
     }else if(rbNPDALL.isSelected()){
            NPDALL.parseStep();
            if(NPDALL.getParser().getAction().equals("Error")){
              lblmsg.setText("String is not accepted -- there are errors");
              cmdStep.setEnabled(false);
            }else if(NPDALL.getParser().getAction().equals("Accept")){
                  lblmsg.setText("String accepted");
                  cmdStep.setEnabled(false);
            } 
        }else if(rbSLR.isSelected()){
            SLRParser.parseStep();
            TableView.setCellColor(SLRParser.r, SLRParser.c);
            TableView.repaint();
            if(SLRParser.getParser().getAction() instanceof Reject){
                cmdStep.setEnabled(false);
                lblmsg.setText("String is not accepted -- there are errors");
            }else if(SLRParser.getParser().getAction() instanceof Accept){
                cmdStep.setEnabled(false);
                lblmsg.setText("String accepted");
            }
        }else if(rbLL.isSelected()){
            LLParser.parseStep();
            TableView.setCellColor(LLParser.r, LLParser.c);
            TableView.repaint();
            if(LLParser.getParser().action().equals("Error")){
              cmdStep.setEnabled(false);
              lblmsg.setText("String is not accepted -- there are errors");
            }else if(LLParser.getParser().action().equals("Accept")){
              cmdStep.setEnabled(false);
              lblmsg.setText("String accepted");
            }
            
        }
       cmdBack.setEnabled(true);
    }//GEN-LAST:event_cmdStepActionPerformed

    private void cmdParseAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdParseAllActionPerformed
        // TODO add your handling code here:
        if(rbLL.isSelected()){
            LLParser.parseText();
            cmdBack.setEnabled(false);
            cmdStep.setEnabled(false);
            String ac=LLParser.getParser().action();
            if(ac.equals("Error")){
              lblmsg.setText("String is not accepted -- there are errors");
            }else if(ac.equals("Accept")){
                  lblmsg.setText("String accepted");
            }
        }else if(rbSLR.isSelected()){
            SLRParser.parse();
            cmdBack.setEnabled(false);
            cmdStep.setEnabled(false);
            Move action=SLRParser.getParser().getAction();
            if(action instanceof Reject){
                lblmsg.setText("String is not accepted -- there are errors");
            }else if(action instanceof Accept){
                lblmsg.setText("String accepted");
            }
        } 
    }//GEN-LAST:event_cmdParseAllActionPerformed

    private void cmdBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdBackActionPerformed
        // TODO add your handling code here:
       
       if(rbNPDALL.isSelected()&& NPDALL.getHistory().size()>0 ){
           NPDALL.undo();
           
       }else if(rbNPDALR.isSelected()&& NPDALR.getHistory().size()>0 ){
           NPDALR.undo();
       }else if(rbLL.isSelected()&& LLParser.getHistory().size()>0){
           LLParser.undo();
       }else if(rbSLR.isSelected() && SLRParser.getHistory().size()>0){
           SLRParser.undo();
       }
       cmdStep.setEnabled(true); 
       lblmsg.setText("Stepping backward");
    }//GEN-LAST:event_cmdBackActionPerformed

    private void rbLLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLLActionPerformed
        // TODO add your handling code here:
        this.setTitle("ParserViz: A visualizer for parsing algorithms --- LL(1)");
        boolean ELL1=Grammar.ELL1();
        if(ELL1==false){
           int value=JOptionPane.showConfirmDialog(this, "The grammar is not LL(1).\n"
                      + "Continue anyway?.", "Grammar not LL(1)",JOptionPane.YES_NO_OPTION);
             if (value == JOptionPane.YES_OPTION) {
                 loadParserViews();
                 connectLLParserComps();
                 LeftPane.setLeftComponent(jPanel2);
                 if(PaneGrammar.getTabCount()==1) PaneGrammar.addTab("Grammar", GrammarView);
                 unFreezeButtons();
                 cmdParseAll.setEnabled(true);
                 PaneGrammar.setSelectedIndex(0);               
             } else if (value == JOptionPane.NO_OPTION) {
               // do nothing
             }
        }else if(ELL1==true){
              loadParserViews();
              connectLLParserComps();
              LeftPane.setLeftComponent(jPanel2);
              if(PaneGrammar.getTabCount()==1) PaneGrammar.addTab("Grammar", GrammarView);  
              unFreezeButtons();
              cmdParseAll.setEnabled(true);
              PaneGrammar.setSelectedIndex(0);
        }
    }//GEN-LAST:event_rbLLActionPerformed

    private void rbSLRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSLRActionPerformed
        // TODO add your handling code here:
          this.setTitle("ParserViz: A visualizer for parsing algorithms --- SLR(1)");
          loadParserViews();
          LeftPane.setLeftComponent(jPanel2);
          if(PaneGrammar.getTabCount()==1) PaneGrammar.addTab("Grammar", GrammarView);
          connectSLRParserComps();
          unFreezeButtons();
          cmdParseAll.setEnabled(true);
          PaneGrammar.setSelectedIndex(0);
    }//GEN-LAST:event_rbSLRActionPerformed

    private void rbNPDALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNPDALLActionPerformed
        // TODO add your handling code here:
        this.setTitle("ParserViz: A visualizer for parsing algorithms --- NPDA-TD");
        loadParserViews();
        LeftPane.setLeftComponent(GrammarView);
        if(PaneGrammar.getTabCount()>1) PaneGrammar.removeTabAt(1);
        LogView.setParser(NPDALL);
        TreeView.setParser(NPDALL);
        unFreezeButtons();
    }//GEN-LAST:event_rbNPDALLActionPerformed

    private void rbParserSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbParserSourceActionPerformed
        // TODO add your handling code here:
           this.setTitle("ParserViz --- Recursive descent parser source generator");
           loadSourcePanel();
    }//GEN-LAST:event_rbParserSourceActionPerformed

    private void rbNPDALRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNPDALRActionPerformed
        this.setTitle("ParserViz: A visualizer for parsing algorithms --- NPDA-BU");
        loadParserViews();
        LeftPane.setLeftComponent(GrammarView);
        if(PaneGrammar.getTabCount()>1) PaneGrammar.removeTabAt(1);
        LogView.setParser(NPDALR);
        TreeView.setParser(NPDALR); 
        unFreezeButtons();
    }//GEN-LAST:event_rbNPDALRActionPerformed
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ParserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ParserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ParserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ParserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ParserFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Components.Concrete.Grammar.CGrammarComp Grammar;
    private Components.Concrete.GrammarViewer.CGrammarViewer GrammarView;
    private Components.Concrete.LLParser.CLLParserComp LLParser;
    private javax.swing.JSplitPane LeftPane;
    private Components.Concrete.ParseLog.CParseLogView LogView;
    private Components.Concrete.Parser.NPDA.NPDALL.CNPDALLComp NPDALL;
    private Components.Concrete.Parser.NPDA.NPDALR.CNPDALRComp NPDALR;
    private javax.swing.JTabbedPane PaneGrammar;
    private javax.swing.JSplitPane RightPane;
    private Components.Concrete.Parser.TableDrivenParser.SLRParser.CSLRParserComp SLRParser;
    private Components.Lexical.Scanners.TableDriven.CDFAScannerComp Scanner;
    private Components.Lexical.SymbolStream.CSymbolStreamComp SymbolStream;
    private Components.Concrete.ParseTablesView.CParseTableView TableView;
    private Components.Concrete.TreeBuilder.CECFGTreeBuilderComp TreeBuilder;
    private Components.GraphView.CGraphView TreeView;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cmdBack;
    private javax.swing.JButton cmdParseAll;
    private javax.swing.JButton cmdStart;
    private javax.swing.JButton cmdStep;
    private javax.swing.JSplitPane framePane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblmsg;
    private javax.swing.JMenu mnuCommit;
    private javax.swing.JMenu mnuGenerator;
    private javax.swing.JMenu mnuGrammar;
    private javax.swing.JMenuItem mnuLoad;
    private javax.swing.JMenuItem mnuNew;
    private javax.swing.JRadioButtonMenuItem rbLL;
    private javax.swing.JRadioButtonMenuItem rbNPDALL;
    private javax.swing.JRadioButtonMenuItem rbNPDALR;
    private javax.swing.JRadioButtonMenuItem rbParserSource;
    private javax.swing.JRadioButtonMenuItem rbSLR;
    private Components.Lexical.RichTextEditor.CRichTextEditor txtScan;
    // End of variables declaration//GEN-END:variables
    
    
    /** Use a BufferedReader wrapped around a FileReader to read
    * the text data from the given file.
   **/
  
  private void connectLLParserComps(){
      LLParser.setGrammar(Grammar);
      TableView.setParser(LLParser);
      TreeView.setParser(LLParser);
      LogView.setParser(LLParser);
      LLParser.setSymbolStream(SymbolStream);
  }
  
  private void connectSLRParserComps(){
       SLRParser.setGrammar(Grammar);
       TableView.setParser(SLRParser);
       TreeView.setParser(SLRParser);
       LogView.setParser(SLRParser);
       SLRParser.setSymbolStream(SymbolStream);
  }
   
  private void loadGrammarPanel(){
      txtGrammar=new JTextArea();
      GrammarView.setGrammar(Grammar);
      framePane.setLeftComponent(txtGrammar);
      framePane.setRightComponent(GrammarView);
  }
  private void loadParserViews(){
        framePane.setLeftComponent(LeftPane);
        framePane.setRightComponent(RightPane);
        lblmsg.setText(" ");
        LogView.clear();
        TreeView.clear();
    }
  private void loadSourcePanel(){
      CDeterministicParserSourceView SourceView =new CDeterministicParserSourceView();
      SourceCodeOptionsPanel optionsPanel=new SourceCodeOptionsPanel();
      freezeButtons();
      optionsPanel.SourceParser.setGrammar(Grammar);
      SourceView.setDeterministicParser(optionsPanel.SourceParser);
      framePane.setLeftComponent(optionsPanel);
      framePane.setRightComponent(SourceView);
 }
  
 private void freezeMenuItems(){
     rbNPDALL.setEnabled(false);
     rbNPDALR.setEnabled(false);
     rbLL.setEnabled(false);
     rbSLR.setEnabled(false);
     rbParserSource.setEnabled(false);
 }
 private void unFreezeMenuItems(){
     rbNPDALL.setEnabled(true);
     rbNPDALR.setEnabled(true);
     rbLL.setEnabled(true);
     rbSLR.setEnabled(true);
     rbParserSource.setEnabled(true);
 }
 private void freezeButtons(){
     cmdStart.setEnabled(false);
     cmdBack.setEnabled(false);
     cmdStep.setEnabled(false);
     cmdParseAll.setEnabled(false);        ;
 }
 private void unFreezeButtons(){
     cmdStart.setEnabled(true);
     cmdBack.setEnabled(false);
     cmdStep.setEnabled(false);
     cmdParseAll.setEnabled(false);        ;
 }
 private void makeComponentsInvisible(){
     Grammar.setVisible(false);
     Scanner.setVisible(false);
     SymbolStream.setVisible(false);
     LLParser.setVisible(false);
     SLRParser.setVisible(false);
     TreeBuilder.setVisible(false);
     NPDALL.setVisible(false);
     NPDALR.setVisible(false);
 }
}

