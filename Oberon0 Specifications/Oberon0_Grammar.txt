! AOL grammar for Oberon0
! NOTE: the input format has changed; every stick expression (in particular those of
! length 1) starts with a ’|’; similarly, every dot expression starts with a ’.’
! Derived from Signature for Oberon0 as given in Oberon_Signature.txt:
! - Sorts of signature are used as Or-nonterminals
! - Operators of signature are used as And-nonterminals
! - For each S* in signature a List-nonterminal S_List0 and a rule S_List0=S* are added
! - true/false included
! Statement_List0=Stat*

[Lexemes]
Lower='a'-'z'
Upper='A'-'Z'
Letter=Lower|Upper
Digit='0'-'9'
RealDot='.'
DigitSeq=Digit+.(RealDot.Digit+)?
Name=Letter.(Letter|Digit)*
BoolConst="TRUE"|"FALSE"
BType="INTEGER"|"BOOLEAN"|"REAL"|"CHAR"|"BYTE"
Hole='<'.(Letter)+.'>'
RelOp="=="|"<>"|'<'|"<="|'>'|">="
AllOps='+'|'-'|'*'|'/'|"DIV"|"MOD"|"OR"|'&'|"=="|"<>"|'<'|"<="|'>'|">="
UnOp='~'

[Terminals]
open='('
close=')'
squareOpen='['
squareClose=']'
number@=DigitSeq
comma=','
dot='.'
bar='|'
equals='='
colon=':'
semicolon=';'
becomes=":="
call="CALL"
begin="BEGIN"
by="BY"
of="OF"
array="ARRAY"
while="WHILE"
do="DO"
end="END"
until="UNTIL"
if="IF"
elsif="ELSIF"
then="THEN"
else="ELSE"
read="READ"
write="WRITE"
odd="ODD"
to="TO"
var="VAR"
const="CONST"
repeat="REPEAT"
case="CASE"
for="FOR"
return="RETURN"
procedure="PROCEDURE"
module="MODULE"
record="RECORD"
btype@=BType
hole@=Hole
relOp@=RelOp
unOp@=UnOp
allOps@=AllOps
boolConst@=BoolConst
ident@=Name
endmarker=0

[Nonterminals]
! Or-Nonterminals======================

Program=|Module
Var=|VariableId
FParameters=|FormalParameters
AParameters=|ActualParameters
FParameter=|FormalParameter
ReturnExp=|Return
FSequence=|FieldSequence
Condition=|RelationalCondition
ElseIf=|ElseIfPart
CasePart=|CaseStat
ReturnExpType=|ReturnType
Type=ArrayType|BasicType|RecordType
Selector=FieldSelector|ArraySelector
Declaration=ConstantDeclaration|VariableDeclaration|ProcedureDeclaration
Statement=Assignment|If|While|Repeat|Read|Write|For|Case|ProcedureCall
Expression=Constant|Variable|Negation|BracketExpression|BoolExpression


! And-NonTerminals

Module=module.Var.semicolon.Declaration_List1.begin.Statement_List0.end.Var
VariableId=.ident@
ConstantDeclaration=const.Var.equals.Expression
VariableDeclaration=Var_List1.colon.Type
ProcedureDeclaration=procedure.Var.FParameters_Option.ReturnExpType_Option.semicolon.Declaration_List0.begin.Statement_List0.ReturnExp_Option.end.Var
Constant=.number@
BracketExpression=open.Expression.allOps@.Expression.close
Negation=unOp@.Expression
Variable=Var.Selector_List0.AParameters_Option
BoolExpression=boolConst@
Assignment=Var.Selector_List0.becomes.Expression.semicolon
ProcedureCall=call.Var.Selector_List0.AParameters_Option.semicolon
If=if.Condition.then.Statement_List1.ElseIf_List0.else.Statement_List0.end
ElseIfPart=elsif.Condition.then.Statement_List1
Repeat=repeat.Statement_List1.until.Condition
While=while.Condition.do.Statement_List1.end
For=for.Var.becomes.Expression.to.Expression.by.Expression.do.Statement_List1.end
Case=case.Expression.of.CasePart_List1.else.Statement_List0.end
CaseStat=Expression_List1.colon.Statement_List1
Read=read.Var.semicolon
Write=write.Expression.semicolon
FormalParameters=open.FParameter_List1.close
ActualParameters=open.Expression_List1.close
FormalParameter=Var_List1.colon.Type
FieldSequence=Var_List1.colon.Type
RelationalCondition=Expression.relOp@.Expression
BasicType=.btype@
ArrayType=array.Expression_List1.of.Type
RecordType=record.FSequence_List1.end
FieldSelector=dot.Var
ArraySelector=squareOpen.Expression_List1.squareClose
Return=return.Expression.semicolon
ReturnType=colon.Type

! List-NonTerminals
Declaration_List1=Declaration+
Declaration_List0=Declaration*
Statement_List1=Statement+
Statement_List0=Statement*
CasePart_List1=CasePart%bar
Expression_List1=Expression%comma
Var_List1=Var%comma
ElseIf_List0=ElseIf*
FParameter_List1=FParameter%semicolon
FSequence_List1=FSequence%semicolon
Selector_List0=Selector*

!Option-NonTerminals
FParameters_Option=FParameters?
AParameters_Option=AParameters?
ReturnExp_Option=ReturnExp?
ReturnExpType_Option=ReturnExpType?


[Start]
startexpr=Program.endmarker